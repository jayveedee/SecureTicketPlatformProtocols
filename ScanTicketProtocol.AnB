Protocol: ScanTicketProtocol

Types:
    Agent A,v,S;
    Number NA, NV, NS, TicketInfo, TicketValidity, RequestTicket;
    Function sk, pk, qrScan, hash

Knowledge:
    A: A, v, qrScan(v), pk(v), pk(A), inv(pk(A));
    v: A, v, S, sk(v,S), hash, qrScan(v), inv(qrScan(v)), pk(v), inv(pk(v)), pk(S), pk(A);
    S: A, v, S, sk(v,S), hash, pk(S), inv(pk(S)), pk(v);

# The protocol will scan the ticket from the app via some qrscanner, which only the venue knows (as this is most likely done by camera)
# however we still want to authenticate that the A is who he says he is and the reverse. Therefore we send a challenge before we start doing anything.
# Afterwards the venue request for the ticket and scans it. The venue then tries to get a hold of the server, by sending a challenge again
# This is to authenticate them both which afterwards we can send over the hash of the ticketInfo, to check if it's in the server's database of valid tickets
# The server then sends back the state of the validity of the ticket which the venue then can use

# Assumptions: (A = APP, v = Venue, S = SERVER)
# 1. Server has a hash of all valid tickets beforehand
# 2. Venue has a shared key between the server and venue. It also has a public/private key pair which is known to the server (initially)
# 3. Server has a shared key between the server and venue. It also has a public/private key pair which is known to the venue (initially)
# 4. The app has already created its own public/private key pair and shared it over to the venue before the communication starts (for example, just sending its own public key and asking for the venue's public key)
# 5. The venue is assumed to be trusted. If it's not then the whole protocol does not work as they sit inbetween everything
Actions:
    v->A: A, v, NV                                                          # Challenge to authenticate A,v
    A->v: {A, v, NA, NV}pk(v)                                               # Challenge to authenticate A,v
    v->A: {A, v, NA, NV, RequestTicket}pk(A)                                # Challenge to authenticate A,v
    A->v: {{A, v, NA, NV, {TicketInfo}qrScan(v)}inv(pk(A))}pk(v)            # Send ticket info over to venue
    v->S: {|v, S, NV|}sk(v,S)                                               # Challenge to authenticate S,v
    S->v: {|v, S, NV, NS|}sk(v,S)                                           # Challenge to authenticate S,v
    v->S: {|{v, S, NA, NV, NS, hash(TicketInfo)}inv(pk(v))|}sk(v,S)         # Verify ticket is valid by checking with server
    S->v: {|{S, v, NA, NV, NS, TicketValidity}inv(pk(S))|}sk(v,S)           # Confirm the validity of the ticket with the venue

Goals:
    A authenticates v on NA,NV         
    v authenticates A on NA,NV         
    v authenticates S on NA,NV,NS      
    S authenticates v on NA,NV,NS      

    RequestTicket secret between A,v
    TicketInfo secret between A,v
    TicketValidity secret between v,S
